# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.http.secret.key = "1rC;1?]kyG0[bIKG35L_1]=/LJVwnA>_^6ODA`8_<hAfpA4MlOc6H>[R0^<TL`jW"

play.server.http.idleTimeout = 600s

play.filters.disabled += play.filters.csrf.CSRFFilter

# The application languages
# ~~~~~
play.i18n.langs = [ "en" ]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# play.http.router = my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.profile=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.username=sa
# db.default.password=""



slick.dbs.default.profile= "slick.jdbc.MySQLProfile$"
slick.dbs.default.db.driver="com.mysql.jc.jdbc.Driver"
slick.dbs.default.db.url=${MYSQL_JDBC}
slick.dbs.default.db.user=${MYSQL_USER}
slick.dbs.default.db.password=${MYSQL_PW}
#slick.dbs.default.db.url="jdbc:mysql://localhost:3306/tournamentManager"
#slick.dbs.default.db.user=root
#slick.dbs.default.db.password=ttv01


# Evolutions
# ~~~~~
# You can disable evolutions if needed
# play.evolutions.enabled=false

# You can disable evolutions for a specific datasource if necessary
# play.evolutions.db.default.enabled=false

play.modules.enabled += "modules.JobModule"

# play.server.pidfile.path=/opt/app-root/src/RUNNING_PID

play.server.http.idleTimeout = 900s

play.filters.hosts {
  allowed = ["."]
}

akka {
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }
  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2555
    }
  }
  cluster {
    seed-nodes = ["akka.tcp://application@127.0.0.1:2555"
      #Add more cluster nodes here
    ]

    auto-down-unreachable-after = 10s
  }
  extensions = ["akka.cluster.pubsub.DistributedPubSub"]
  contrib.cluster.pub-sub {
    # Actor name of the mediator actor, /user/distributedPubSubMediator
    name = distributedPubSubMediator

    # Start the mediator on members tagged with this role.
    # All members are used if undefined or empty.
    role = ""

    # The routing logic to use for 'Send'
    # Possible values: random, round-robin, broadcast
    routing-logic = random

    # How often the DistributedPubSubMediator should send out gossip information
    gossip-interval = 1s

    # Removed entries are pruned after this duration
    removed-time-to-live = 120s

    # Maximum number of elements to transfer in one message when synchronizing the registries.
    # Next chunk will be transferred in next round of gossip.
    max-delta-elements = 3000
  }
}

